{"version":3,"mappings":"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,aAAY,6CAEZ,GAEA,aAAmC,UAInC,GACE,MAAM,eACJnD,WACAN,WACW,QAAE/R,CAAO,MACE,6BACK,eACM,GAGnC,iBACE,cAAqC,mBACnC,6CAAe,mBACb,uBAAe,kBACb,qBAAe,eACP,YACC,eACF,0BACU,kBACW,kCACZ,SAER,oBACI,iDACE,oBAAsC,QAGrC,SACX,iBACK,SACGyV,GACR,cAIN,uBAAe,kBACb,qBAAe,eACP,YACC,cACF,iBACoB,2BACV,iCACD,SAER,mBACI,iDACE,mBAAsC,QAGrC,gBACN,SACL,SACQA,GACR,cAIN,qCAAe,kBACb,qBAAe,eACP,QACD,YACE,WACY,2BACL,SAER,aACI,iDACE,aAAsC,QAGrC,UACN,SACL,SACQA,GACR,cAIN,qCAAe,kBACb,qBAAe,eACP,WACD,WACE,mBACQ,cACO,qCACR,SAER,gBACI,iDACE,gBAAsC,QAGrC,aACN,SACL,SACQA,GACR,cAIN,uBAAe,kBACb,qBAAe,eACP,WACD,aACE,qBACQ,cACO,8BACR,SAER,gBACI,iDACE,gBAAsC,QAGrC,aACN,SACL,SACQA,GACR,cAIN,uBAAe,kBACb,qBAAe,eACP,cACD,gBACE,iBACkB,4BACV,iCACD,SAER,mBACI,iDACE,mBAAsC,QAGrC,gBACN,SACL,SACQA,GACR,cAIN,uBAAe,kBACb,qBAAe,eACP,gBACC,sBACF,4BACU,wBACiB,uCAClB,SAER,2BACI,iDACE,2BAAsC,QAGrC,SACX,UACQA,sBACH,GACL,cAIN,uBAAe,eACP,gBACC,sBACF,wBAC2B,uDACpB,SAEN,2BACI,6BACE,wCAAkB,QAGjB,SACX,UACQA,sBACH,GACL,GACE,YAGR,6BAAe,eACN,cACA,iMACK,kBAAsL,KAG9L,EAGZ,CAvMA/a","names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","__name","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","_options","_formState","submitCount","isDirty","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","delayErrorCallback","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","useState","useCallback","i","t","f","r","a","n","s","u","c","l","m","g","d","e.isValidElement","e.cloneElement","e.createElement","e.Fragment","className","_jsx","Input","children","validations","Feedback"],"sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../node_modules/@hookform/resolvers/dist/resolvers.module.js","../../node_modules/@hookform/resolvers/joi/dist/joi.module.js","../../node_modules/@hookform/error-message/dist/index.esm.js","../../src/components/input.tsx","../../src/components/label.tsx","../../src/components/feedback.tsx","../../src/auth/signup-form.tsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: React.useCallback((value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }), [control, exact]),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: React.useCallback((formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(_name.current) ||\r\n                    (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                    ? { ...fieldValues }\r\n                    : Array.isArray(fieldValues)\r\n                        ? [...fieldValues]\r\n                        : isUndefined(fieldValues)\r\n                            ? defaultValue\r\n                            : fieldValues);\r\n            }\r\n        }, [control, exact, defaultValue]),\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && isString(message)) {\r\n            inputRef.setCustomValidity(message);\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current);\r\n            if (Array.isArray(fieldValues)) {\r\n                setFields(fieldValues);\r\n                ids.current = fieldValues.map(generateId);\r\n            }\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async () => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name]\r\n                ? validateFields[name] + 1\r\n                : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                _updateValid();\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _focusError();\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: React.useCallback((value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = {\r\n                    ...control._formState,\r\n                    ...value,\r\n                };\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        }, [control]),\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import{get as r,set as i}from\"react-hook-form\";var e=function(i,e,t){if(i&&\"reportValidity\"in i){var f=r(t,e);i.setCustomValidity(f&&f.message||\"\"),i.reportValidity()}},t=function(r,i){var t=function(t){var f=i.fields[t];f&&f.ref&&\"reportValidity\"in f.ref?e(f.ref,t,r):f.refs&&f.refs.forEach(function(i){return e(i,t,r)})};for(var f in i.fields)t(f)},f=function(e,f){f.shouldUseNativeValidation&&t(e,f);var o={};for(var a in e){var n=r(f.fields,a);i(o,a,Object.assign(e[a],{ref:n&&n.ref}))}return o};export{f as toNestError,t as validateFieldsNatively};\n//# sourceMappingURL=resolvers.module.js.map\n","import{appendErrors as e}from\"react-hook-form\";import{toNestError as r,validateFieldsNatively as t}from\"@hookform/resolvers\";var n=function(n,o,a){return void 0===o&&(o={abortEarly:!1}),void 0===a&&(a={}),function(i,s,u){try{var c=function(){return l.error?{values:{},errors:r((n=l.error,o=!u.shouldUseNativeValidation&&\"all\"===u.criteriaMode,n.details.length?n.details.reduce(function(r,t){var n=t.path.join(\".\");if(r[n]||(r[n]={message:t.message,type:t.type}),o){var a=r[n].types,i=a&&a[t.type];r[n]=e(n,o,r,t.type,i?[].concat(i,t.message):t.message)}return r},{}):{}),u)}:(u.shouldUseNativeValidation&&t({},u),{errors:{},values:l.value});var n,o},v=Object.assign({},o,{context:s}),l={},f=function(){if(\"sync\"===a.mode)l=n.validate(i,v);else{var e=function(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}(function(){return Promise.resolve(n.validateAsync(i,v)).then(function(e){l.value=e})},function(e){l.error=e});if(e&&e.then)return e.then(function(){})}}();return Promise.resolve(f&&f.then?f.then(c):c())}catch(e){return Promise.reject(e)}}};export{n as joiResolver};\n//# sourceMappingURL=joi.module.js.map\n","import*as e from\"react\";import{useFormContext as r,get as n}from\"react-hook-form\";var s=function(s){var t=s.as,a=s.errors,m=s.name,o=s.message,i=s.render,l=function(e,r){if(null==e)return{};var n,s,t={},a=Object.keys(e);for(s=0;s<a.length;s++)r.indexOf(n=a[s])>=0||(t[n]=e[n]);return t}(s,[\"as\",\"errors\",\"name\",\"message\",\"render\"]),f=r(),c=n(a||f.formState.errors,m);if(!c)return null;var g=c.message,u=c.types,d=Object.assign({},l,{children:g||o});return e.isValidElement(t)?e.cloneElement(t,d):i?i({message:g||o,messages:u}):e.createElement(t||e.Fragment,d)};export{s as ErrorMessage};\n//# sourceMappingURL=index.esm.js.map\n","import clsx from 'clsx';\nimport { forwardRef, InputHTMLAttributes } from 'react';\n\nconst Input = forwardRef<\n  HTMLInputElement,\n  InputHTMLAttributes<HTMLInputElement>\n>(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      ref={ref}\n      {...props}\n      type={type}\n      className={clsx(\n        'peer block text-neutral-600 leading-snug px-4 py-3 rounded border-gray-300 placeholder:text-gray-300 focus:ring-0 focus:outline-0 focus:border-gray-400 focus:invalid:border-red-500 invalid:border-red-500 w-full',\n        className,\n      )}\n    />\n  );\n});\n\nInput.displayName = 'Input';\n\nexport default Input;\n","import clsx from 'clsx';\nimport { LabelHTMLAttributes } from 'react';\n\nexport default function Label({\n  children,\n  className,\n  ...props\n}: LabelHTMLAttributes<HTMLLabelElement>) {\n  return (\n    <label\n      {...props}\n      className={clsx(\n        'text-sm font-medium text-gray-400 peer-placeholder-shown:text-neutral-600 peer-invalid:text-red-500',\n        className,\n      )}>\n      {children}\n    </label>\n  );\n}\n","export default function Feedback({ message }: { message: string }) {\n  return (\n    <span\n      role=\"alert\"\n      aria-label={message}\n      className=\"block text-sm text-red-500\">\n      {message}\n    </span>\n  );\n}\n","import { useForm } from 'react-hook-form';\nimport { joiResolver } from '@hookform/resolvers/joi';\nimport { ErrorMessage } from '@hookform/error-message';\nimport Input from '../components/input';\nimport Label from '../components/label';\nimport Button from '../components/button';\nimport Feedback from '../components/feedback';\n\nconst Joi = await import('joi');\n\nconst validations = Joi.object<SignupUser>({\n  firstname: Joi.string().trim().required().label('firstname'),\n  lastname: Joi.string().trim().required().label('lastname'),\n  id: Joi.string().trim().required().label('id'),\n  phone: Joi.string().trim().required().label('phone number'),\n  email: Joi.string()\n    .trim()\n    .email({ tlds: { allow: false } })\n    .required()\n    .label('email'),\n  password: Joi.string().trim().required().label('password'),\n  confirmPassword: Joi.any()\n    .valid(Joi.ref('password'))\n    .required()\n    .messages({ 'any.only': 'Passwords must match each other' }),\n  termsConditions: Joi.boolean()\n    .equal(true)\n    .required()\n    .messages({ 'any.only': 'Terms must be accepted' }),\n}).messages({\n  'string.empty': '{#label} is a required field',\n});\n\nexport default function SignupForm({\n  onSubmit,\n}: {\n  onSubmit: (data: SignupUser) => void;\n}) {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<SignupUser>({\n    shouldUseNativeValidation: true,\n    resolver: joiResolver(validations),\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"grid grid-cols-2 gap-y-8 gap-x-4\">\n        <div className=\"col-span-2\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              id=\"firstname\"\n              autoComplete=\"given-name\"\n              {...register('firstname')}\n              placeholder=\"Enter your firstname\"\n            />\n            <Label\n              htmlFor=\"firstname\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Firstname\n            </Label>\n            <ErrorMessage\n              errors={errors}\n              name=\"firstname\"\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              id=\"lastname\"\n              {...register('lastname')}\n              autoComplete=\"family-name\"\n              placeholder=\"Enter your lastname\"\n            />\n            <Label\n              htmlFor=\"lastname\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Lastname\n            </Label>\n            <ErrorMessage\n              name=\"lastname\"\n              errors={errors}\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2 sm:col-span-1\">\n          <div className=\"relative\">\n            <Input\n              id=\"id\"\n              type=\"text\"\n              {...register('id')}\n              placeholder=\"Enter your ID\"\n            />\n            <Label\n              htmlFor=\"id\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              ID\n            </Label>\n            <ErrorMessage\n              name=\"id\"\n              errors={errors}\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2 sm:col-span-1\">\n          <div className=\"relative\">\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              autoComplete=\"tel\"\n              {...register('phone')}\n              placeholder=\"Enter your phone number\"\n            />\n            <Label\n              htmlFor=\"phone\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Phone\n            </Label>\n            <ErrorMessage\n              name=\"phone\"\n              errors={errors}\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2\">\n          <div className=\"relative\">\n            <Input\n              id=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              {...register('email')}\n              placeholder=\"Enter your email\"\n            />\n            <Label\n              htmlFor=\"email\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Email\n            </Label>\n            <ErrorMessage\n              name=\"email\"\n              errors={errors}\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2\">\n          <div className=\"relative\">\n            <Input\n              id=\"password\"\n              type=\"password\"\n              {...register('password')}\n              autoComplete=\"new-password\"\n              placeholder=\"Enter your password\"\n            />\n            <Label\n              htmlFor=\"password\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Password\n            </Label>\n            <ErrorMessage\n              name=\"password\"\n              errors={errors}\n              render={Feedback}\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2\">\n          <div className=\"relative\">\n            <Input\n              type=\"password\"\n              id=\"confirm-password\"\n              autoComplete=\"new-password\"\n              {...register('confirmPassword')}\n              placeholder=\"Enter your password again\"\n            />\n            <Label\n              htmlFor=\"confirm-password\"\n              className=\"absolute left-2 -top-3 bg-white px-2\">\n              Confirm Password\n            </Label>\n            <ErrorMessage\n              errors={errors}\n              render={Feedback}\n              name=\"confirmPassword\"\n            />\n          </div>\n        </div>\n\n        <div className=\"col-span-2\">\n          <Input\n            type=\"checkbox\"\n            id=\"terms-conditions\"\n            {...register('termsConditions')}\n            className=\"inline-block text-blue-500 px-2 py-2 w-auto\"\n          />\n          <Label\n            htmlFor=\"terms-conditions\"\n            className=\"font-normal ml-3\">\n            Agree to terms and conditions\n          </Label>\n          <ErrorMessage\n            errors={errors}\n            render={Feedback}\n            name=\"termsConditions\"\n          />\n        </div>\n      </div>\n\n      <div className=\"text-center mt-9\">\n        <Button\n          type=\"submit\"\n          className=\"bg-blue-500 hover:bg-blue-600 active:bg-blue-700 focus:bg-blue-700 text-white font-medium py-[10px] px-4 rounded-md focus:ring focus:ring-blue-500 focus:ring-offset-1 min-w-[205px]\">\n          Sign up\n        </Button>\n      </div>\n    </form>\n  );\n}\n"],"file":"assets/signup-form.d2d1153a.js"}